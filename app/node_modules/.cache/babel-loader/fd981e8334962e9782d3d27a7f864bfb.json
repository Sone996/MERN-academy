{"ast":null,"code":"import { authRepo } from \"./Auth.repo\";\nimport { SHA512 } from \"crypto-js\";\nimport { TOKEN_LS_NAME } from \"../../Constants/Constants\";\n\nclass AuthService {\n  async login(data) {\n    try {\n      data.password = SHA512(data.password).toString();\n      const res = await authRepo.login(data);\n      localStorage.setItem(TOKEN_LS_NAME, res.data[\"session-id\"]);\n      return Promise.resolve(res);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  register(data) {\n    data.password = SHA512(data.password).toString();\n    return authRepo.register(data);\n  }\n\n  fetchActiveAccount() {\n    return authRepo.fetchActiveAccount();\n  }\n\n  logout() {\n    return authRepo.logout();\n  }\n\n  isLogged() {\n    return localStorage.getItem(TOKEN_LS_NAME);\n  }\n\n}\n\nexport const authService = new AuthService();","map":{"version":3,"names":["authRepo","SHA512","TOKEN_LS_NAME","AuthService","login","data","password","toString","res","localStorage","setItem","Promise","resolve","error","reject","register","fetchActiveAccount","logout","isLogged","getItem","authService"],"sources":["/Users/nebojsa/projects/MERN-academy/factory-academy-react-query-ts/src/Modules/AuthModule/Auth.service.ts"],"sourcesContent":["import { authRepo } from \"./Auth.repo\";\nimport { SHA512 } from \"crypto-js\";\nimport { TOKEN_LS_NAME } from \"../../Constants/Constants\";\n\nclass AuthService {\n  async login(data: any) {\n    try {\n      data.password = SHA512(data.password).toString();\n      const res = await authRepo.login(data);\n      localStorage.setItem(TOKEN_LS_NAME, res.data[\"session-id\"]);\n      return Promise.resolve(res);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  register(data: any) {\n    data.password = SHA512(data.password).toString();\n    return authRepo.register(data);\n  }\n\n  fetchActiveAccount() {\n    return authRepo.fetchActiveAccount();\n  }\n\n  logout() {\n    return authRepo.logout();\n  }\n\n  isLogged() {\n    return localStorage.getItem(TOKEN_LS_NAME);\n  }\n}\n\nexport const authService = new AuthService();\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,aAAT,QAA8B,2BAA9B;;AAEA,MAAMC,WAAN,CAAkB;EACL,MAALC,KAAK,CAACC,IAAD,EAAY;IACrB,IAAI;MACFA,IAAI,CAACC,QAAL,GAAgBL,MAAM,CAACI,IAAI,CAACC,QAAN,CAAN,CAAsBC,QAAtB,EAAhB;MACA,MAAMC,GAAG,GAAG,MAAMR,QAAQ,CAACI,KAAT,CAAeC,IAAf,CAAlB;MACAI,YAAY,CAACC,OAAb,CAAqBR,aAArB,EAAoCM,GAAG,CAACH,IAAJ,CAAS,YAAT,CAApC;MACA,OAAOM,OAAO,CAACC,OAAR,CAAgBJ,GAAhB,CAAP;IACD,CALD,CAKE,OAAOK,KAAP,EAAc;MACd,OAAOF,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;IACD;EACF;;EAEDE,QAAQ,CAACV,IAAD,EAAY;IAClBA,IAAI,CAACC,QAAL,GAAgBL,MAAM,CAACI,IAAI,CAACC,QAAN,CAAN,CAAsBC,QAAtB,EAAhB;IACA,OAAOP,QAAQ,CAACe,QAAT,CAAkBV,IAAlB,CAAP;EACD;;EAEDW,kBAAkB,GAAG;IACnB,OAAOhB,QAAQ,CAACgB,kBAAT,EAAP;EACD;;EAEDC,MAAM,GAAG;IACP,OAAOjB,QAAQ,CAACiB,MAAT,EAAP;EACD;;EAEDC,QAAQ,GAAG;IACT,OAAOT,YAAY,CAACU,OAAb,CAAqBjB,aAArB,CAAP;EACD;;AA3Be;;AA8BlB,OAAO,MAAMkB,WAAW,GAAG,IAAIjB,WAAJ,EAApB"},"metadata":{},"sourceType":"module"}